<?php
error_reporting(0);
ini_set('display_errors', 1);
/*
Plugin Name: Multiloc Auto Menus
Description: Making our menus automated.
Version: 0.1 BETA
descript: Multiloc Dev Team
descript URI: https://example.com
Text Domain: multiloc-auto-menu
*/



add_action( 'add_meta_boxes', 'multiloc_add_meta_box' );
 
if ( ! function_exists( 'multiloc_add_meta_box' ) ) {
	/**
	 * Add meta box to page screen
	 *
	 * This function handles the addition of variuos meta boxes to your page or post screens.
	 * You can add as many meta boxes as you want, but as a rule of thumb it's better to add
	 * only what you need. If you can logically fit everything in a single metabox then add
	 * it in a single meta box, rather than putting each control in a separate meta box.
	 *
	 * @since 1.0.0
	 */
	function multiloc_add_meta_box() {
		add_meta_box( 'additional-page-metabox-options', esc_html__( 'Remove Page From Main Nav', 'multiloc' ), 'multiloc_metabox_controls', 'page', 'normal', 'low' );
	}
}

if ( ! function_exists( 'multiloc_metabox_controls' ) ) {
	/**
	 * Meta box render function
	 *
	 * @param  object $post Post object.
	 * @since  1.0.0
	 */
	function multiloc_metabox_controls( $post ) {
		$meta = get_post_meta( $post->ID );
		$multiloc_checkbox_value = ( isset( $meta['multiloc_checkbox_value'][0] ) &&  '1' === $meta['multiloc_checkbox_value'][0] ) ? 1 : 0;
		wp_nonce_field( 'multiloc_control_meta_box', 'multiloc_control_meta_box_nonce' ); // Always add nonce to your meta boxes!
		?>
		<style type="text/css">
			.post_meta_extras p{margin: 20px;}
			.post_meta_extras label{display:block; margin-bottom: 10px;}
		</style>
		<div class="post_meta_extras">
			<p>
				<label><input type="checkbox" name="multiloc_checkbox_value" value="1" <?php checked( $multiloc_checkbox_value, 1 ); ?> /><?php esc_attr_e( 'Check this box if you would like to exclude this page from the main nav menu.', 'multiloc' ); ?></label>
			</p>
		</div>
		<?php
	}
}

add_action( 'save_post', 'multiloc_save_metaboxes' );
if ( ! function_exists( 'multiloc_save_metaboxes' ) ) {
	/**
	 * Save controls from the meta boxes
	 *
	 * @param  int $post_id Current post id.
	 * @since 1.0.0
	 */
	function multiloc_save_metaboxes( $post_id ) {
		/*
		 * We need to verify this came from the our screen and with proper authorization,
		 * because save_post can be triggered at other times. Add as many nonces, as you
		 * have metaboxes.
		 */
		if ( ! isset( $_POST['multiloc_control_meta_box_nonce'] ) || ! wp_verify_nonce( sanitize_key( $_POST['multiloc_control_meta_box_nonce'] ), 'multiloc_control_meta_box' ) ) { // Input var okay.
			return $post_id;
		}
 
		// Check the user's permissions.
		if ( isset( $_POST['post_type'] ) && 'page' === $_POST['post_type'] ) { // Input var okay.
			if ( ! current_user_can( 'edit_page', $post_id ) ) {
				return $post_id;
			}
		} else {
			if ( ! current_user_can( 'edit_post', $post_id ) ) {
				return $post_id;
			}
		}
		/*
		 * If this is an autosave, our form has not been submitted,
		 * so we don't want to do anything.
		 */
		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
			return $post_id;
		}
		/* Ok to save */ 
		$multiloc_checkbox_value = ( isset( $_POST['multiloc_checkbox_value'] ) && '1' === $_POST['multiloc_checkbox_value'] ) ? 1 : 0; // Input var okay.

		update_post_meta( $post_id, 'multiloc_checkbox_value', esc_attr( $multiloc_checkbox_value ) );

	}
}

//-------------> Nav Walker
// this is for reference only //
/*
wp_nav_menu()

<div class="menu-container">
	<ul> // start_lvl()
		<li><a><span> //start_el()
				</a></span>
		</li>  // end_el()
		<li><a><LINK</a><li>
		<li><a><LINK</a><li>
		<li><a><LINK</a><li>
	</ul> // end_lvl()
</div>
*/
class BS_Page_Walker extends Walker_Page {
	
	function start_lvl( &$output, $depth = 0, $args = Array() ){ //ul
		$args = json_decode(json_encode($args), FALSE);
		$indent = str_repeat("\t",$depth);
		$submenu = ($depth > 0) ? ' sub-menu' : '';
		$output .= "\n$indent<ul class=\"dropdown-menu$submenu depth_$depth\">\n";
	}
	
	function start_el( &$output, $item, $depth = 0, $args = array(), $id = 0 ){ //li a span
		$args = json_decode(json_encode($args), FALSE);
		var_dump($args);
		
		$indent = ( $depth ) ? str_repeat("\t",$depth) : '';
		
		$li_attributes = '';
		$class_names = $value = '';
		
		$classes = empty( $item->classes ) ? array() : (array) $item->classes;
		
		$classes[] = ($args->walker->has_children) ? 'dropdown' : '';
		$classes[] = ($item->current || $item->current_item_ancestor) ? 'active' : '';
		$classes[] = 'menu-item-' . $item->ID;
		if( $depth && $args->walker->has_children ){
			$classes[] = 'dropdown-submenu';
		}
		
		$class_names =  join(' ', apply_filters('nav_menu_css_class', array_filter( $classes ), $item, $args ) );
		$class_names = ' class="' . esc_attr($class_names) . '"';
		
		$id = apply_filters('nav_menu_item_id', 'menu-item-'.$item->ID, $item, $args);
		$id = strlen( $id ) ? ' id="' . esc_attr( $id ) . '"' : '';
		
		$output .= $indent . '<li' . $id . $value . $class_names . $li_attributes . '>';
		
		$attributes = ! empty( $item->attr_title ) ? ' title="' . esc_attr($item->attr_title) . '"' : '';
		$attributes .= ! empty( $item->target ) ? ' target="' . esc_attr($item->target) . '"' : '';
		$attributes .= ! empty( $item->xfn ) ? ' rel="' . esc_attr($item->xfn) . '"' : '';
		$attributes .= ! empty( $item->url ) ? ' href="' . esc_attr($item->url) . '"' : '';
		
		$attributes .= ( $args->walker->has_children ) ? ' class="dropdown-toggle" data-toggle="dropdown"' : '';
		if (isset($args->before))
			{
					$item_output = $args->before;
					$item_output .= '<a' . $attributes . '>';
			}
		else
			{
				$item_output = '<a' . $attributes . '>';
			}
		$item_output .= $args->link_before . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;
		$item_output .= ( $depth == 0 && $args->walker->has_children ) ? ' <b class="caret"></b></a>' : '</a>';
	
		
		$output .= apply_filters ( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );
		
	}
}


//-------------> Build navigation menu


add_action( 'build_the_menu', 'build_my_menu' );

function build_my_menu() {
	?><ul> <?php	
	$loco = do_shortcode ('[multiloc_vars id="location"]');
	//echo "<h2>" . $loco . "</h2>";
	$page = get_page_by_path($loco);
	$pageIDList = "";
	if ($page) {
		$pageId = $page->ID;
		//$key = 'remove_nav_link';
		//$menu_link = get_post_meta($page->ID, $key, true);
		$pages = get_pages();
		foreach($pages as $page) {
		
			$menu_link = get_post_meta( $page->ID, 'multiloc_checkbox_value', true );
			// echo $menu_link;
			if ($menu_link == 1){
				$pageIDs[] = $page->ID;
				$pageIDList = implode(',', $pageIDs);
				//echo "<h3>pageIDList: " . $pageIDList . "</h3>"; echo strtolower(get_the_title($page->ID)); echo $page->ID; echo " <b>this item will be removed from the menu</b><br><br> ";
				}
			}


		$args = array(
			'exclude'     		=>  $pageIDList,
			'title_li' 				=>  "",
			'child_of'		    =>	$pageId,
			//'depth' 					=>  0,
    	//'echo' 						=>  1,
			'publish_status'  =>  'publish',
			'post_type'       =>  'page',
			'sort_order'			=>  'ASC',	
			'walker' 					=> new BS_Page_Walker()
		);
		?>
					<nav class="navbar navbar-default navbar-fixed-top">
					  <div class="container">
					    <!-- Brand and toggle get grouped for better mobile display -->
					    <div class="navbar-header">
					      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
					        <span class="sr-only">Toggle navigation</span>
					        <span class="icon-bar"></span>
					        <span class="icon-bar"></span>
					        <span class="icon-bar"></span>
					      </button>
					    </div>
						<div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
										<?php
										$children = wp_list_pages($args);
										if ($children) {  
											echo $children;
															// function clean_wp_list_pages($menu) {
															// 	// Remove redundant title attributes
															// 	$menu = remove_title_attributes($menu);
															// 	// Remove protocol and domain name from href values
															// 	$menu = make_href_root_relative($menu);
															// 	// Give the list items containing the current item or one of its ancestors a class name
															// 	$menu = preg_replace('/class="(.*?)current_page(.*?)"/','class="sel"',$menu);
															// 	// Remove all other class names
															// 	$menu = preg_replace('/ class=(["\'])(?!sel).*?\1/','',$menu);
															// 	// Give the current link and the links to its ancestors a class name and wrap their content in a strong element
															// 	$menu = preg_replace('/class="sel"><a(.*?)>(.*?)<\/a>/','class="sel"><a$1 class="sel"><strong>$2</strong></a>',$menu);
															// 	return $menu;
															// }
															// add_filter( 'wp_list_pages', 'clean_wp_list_pages' ); 
										}
										?>
							</div>
					  </div><!-- /.container-fluid -->
					</nav>
				
		  <?php
		
	}

	// var_dump(get_option('page_on_front'));
	// echo "<br><br>" . get_option('page_on_front') . "<br><br>";
	//var_dump(get_page_by_title( 'home' ));


	if (!$page) {

		$location_code = do_shortcode( '[multiloc_vars id="location"]');
		//echo $location_code;
		wp_nav_menu([
			'menu'            => $location_code,
			'theme_location'  => 'default'
					]);
	}
	?></ul> <?php
}

add_shortcode('build_menu', 'build_my_menu');

//------------> End buildMenu
